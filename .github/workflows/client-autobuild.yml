name: 'Client'

on:
  push:
    branches:
      - main
      - pmm-*
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*

  pull_request:
    paths:
      - '.github/workflows/client-autobuild.yml'
      - 'admin/**'
      - 'agent/**'

jobs:
  autobuild:
    name: Client autobuild
    runs-on: ubuntu-22.04
    timeout-minutes: 35
    permissions:
      packages: read
    strategy:
      fail-fast: false
    env:
      SCRIPT_DIR: ${{ github.workspace }}/sources/pmm/src/github.com/percona/pmm/build/scripts

    steps:
      - name: Set environment variables
        run: |
          # Echo the name of the current branch
          # https://stackoverflow.com/questions/58033366/how-to-get-the-current-branch-within-github-actions
          GIT_BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "Branch: $GIT_BRANCH"
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v3
        with:
          repository: percona-lab/pmm-submodules
          ref: ${{ 'PMM-2.0' || env.GIT_BRANCH }}
          submodules: 'recursive'

      # - name: Set up Go release
      #   uses: actions/setup-go@v4
      #   with:
      #     go-version-file: ${{ github.workspace }}/go.mod
      #     cache: false

      # - name: Enable Go build cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/go-build
      #     key: ${{ runner.os }}-go-build-${{ github.ref }}-${{ hashFiles('**') }}
      #     restore-keys: |
      #       ${{ runner.os }}-go-build-${{ github.ref }}-
      #       ${{ runner.os }}-go-build-

      # - name: Enable Go modules cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}
      #     restore-keys: ${{ runner.os }}-go-modules-

      # - name: Download Go modules
      #   run: go mod download -x

      # - name: Copy the VERSION file
      #   run: curl -o VERSION https://raw.githubusercontent.com/Percona-Lab/pmm-submodules/PMM-2.0/VERSION

      - name: Prepare the environment
        run: |
          git submodule status
          # checkout the feature branch
          git config -f .gitmodules submodule.pmm.url https://github.com/atymchuk/pmm.git # TODO: remove this line
          git config -f .gitmodules submodule.pmm.branch ${{ env.GIT_BRANCH }}
          git submodule sync
          git submodule update --init --recursive --remote
          git commit -am "fb: save current changes"

          export commit_sha=$(git submodule status | grep 'pmm/src/github.com/percona/pmm' | awk -F ' ' '{print $1}')
          export api_tests_commit_sha=$(git submodule status | grep 'sources/pmm/src' | awk -F ' ' '{print $1}')
          export api_tests_branch=$(git config -f .gitmodules submodule.pmm.branch)
          export api_tests_url=$(git config -f .gitmodules submodule.pmm.url)
          echo $api_tests_commit_sha > apiCommitSha
          echo $api_tests_branch > apiBranch
          echo $api_tests_url > apiURL
          cat apiBranch
          cat apiURL
          export pmm_qa_commit_sha=$(git submodule status | grep 'pmm-qa' | awk -F ' ' '{print $1}')
          export pmm_qa_branch=$(git config -f .gitmodules submodule.pmm-qa.branch)
          echo $pmm_qa_branch > pmmQABranch
          echo $pmm_qa_commit_sha > pmmQACommitSha
          export pmm_ui_tests_commit_sha=$(git submodule status | grep 'pmm-ui-tests' | awk -F ' ' '{print $1}')
          export pmm_ui_tests_branch=$(git config -f .gitmodules submodule.pmm-ui-tests.branch)
          echo $pmm_ui_tests_branch > pmmUITestBranch
          echo $pmm_ui_tests_commit_sha > pmmUITestsCommitSha
          export fb_commit_sha=$(git rev-parse HEAD)
          echo $fb_commit_sha > fbCommitSha

      - name: Build client source
        run: |
          set -o errexit
          export ROOT_DIR=${{ github.workspace }}
          ls -la
          ${{ env.SCRIPT_DIR }}/build-client-source

      - name: Build client binary
        run: |
          # TODO: see if this step can be skipped
          set -o errexit
          export ROOT_DIR=${{ github.workspace }}
          ${{ env.SCRIPT_DIR }}/build-client-binary

      - name: Login to ghcr.io registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull rpmbuild image
        run: docker pull ghcr.io/${{ github.repository }}/rpmbuild:ol9

      - name: Build client binary srpm
        run: |
          set -o errexit
          export ROOT_DIR=${{ github.workspace }}
          mkdir -p $ROOT_DIR/results/srpm
          ${{ env.SCRIPT_DIR }}/build-client-srpm ghcr.io/${{ github.repository }}/rpmbuild:ol9

      - name: Build client binary rpm
        run: |
          set -o errexit
          export ROOT_DIR=${{ github.workspace }}
          ${{ env.SCRIPT_DIR }}/build-client-rpm ghcr.io/${{ github.repository }}/rpmbuild:ol9

          mkdir -p tmp/pmm-server/RPMS/
          cp results/rpm/pmm*-client-*.rpm tmp/pmm-server/RPMS/

      - name: Run debug commands on failure
        if: ${{ failure() }}
        run: |
          pwd
          env
          go env
          git status
